⚠️：whatever happened to the american dream?
////////////////////// 8888888888 /////////////////////////////////////

基础教程：https://blog.csdn.net/tonglin12138/article/details/88675679
互动习题：https://learngitbranching.js.org/?locale=zh_CN
习题答案：https://blog.csdn.net/qq_34519487/article/details/107882290


1. 符号解释：
   1）笔记中的“结点”代表一个“版本”；
   2）A：指版本树中的一系分支头（叶子结点）；
   3）c：指版本树中的任意一个结点（树结点）；
   
   4）A* / HEAD：
        . 指向版本树结点的当前工作指针，版本树的变动一般都在该工作指针下展开；
        . 在版本树中数量唯一；
        . 如与分支头 A 重合，以 * 表示，
          如不与分支头 A 重合，以 HEAD 单独表示；
          
          
2. 工作区域：
    1）基本概念：
         工作区 Workspace：   平时存放项目代码的地方；
         暂存区 Index / Stage：用于临时存放你的改动，事实上它只是单个文件，保存即将提交到文件列表信息；
         版本库 Repository：    安全存放数据的位置，这里面有你提交到所有版本的数据。其中 HEAD 指向最新放入仓库的版本；
         远程仓库 Remote：     又叫 <Git 仓库>，托管代码的服务器，可以简单认为是项目组中的一台电脑，用于远程数据交换
         
    2）演示图：
                                                                       pull
                                       ---------------------------------------> 
                                        fetch/clone                                 checkout
                                       ---------->                     ----------------->
         工作区域：/Remote/ <---------- /Repository/ <------ /index/ <---- /Workplace/
                                              push                            commit                add
                            
         Ref：https://blog.csdn.net/tonglin12138/article/details/88675679
         
          
    2）工作流程：
         1> 在<工作区>中添加、修改文件；
         2> 将需要进行版本管理的文件放入<暂存区>；
         3> 将<暂存区>的文件提交到 git 仓。
         
 
3. 文件四种状态：
    0）概述：
         要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。
         git 不关心文件两个版本之间的具体差别，而是关心文件的整体是否有改变，若文件改变，添加提交时就生成文件新版本的快照，而判断文件整体是否改变的方法就是用 
         SHA-1 算法计算文件的校验和。


    1）git 管理文件的三种状态：已修改 (modified)，已暂存 (staged)，已提交 (committed)
    
    2）演示图：  
                         Untracked                                    Tracked
                                                         |-------------|-------------|
                                                 Unmodified          Modified              Staged
                                                 
                                add the file
                                ----------------------------------------> 
                                                        edit the file
                                                        --------------> 
                                                                                 stage the file
                                                                                 --------------> 
                                     remove the file
                               <-------------- 
                                                                                                 commit
                                                          <---------------------------
    
    Untracked：未跟踪，此文件在文件夹中, 但并没有加入 git 库, 不参与版本控制. 可通过 git add 更改状态为 Staged；
    Tracked：. Unmodified： 文件已入版本库, 未修改，即<版本库>中的文件快照内容与文件夹中完全一致；
                                        这种类型的文件有两种去处：如果它被修改，则变为 Modified 文件；
                                                                               如果使用 git rm 移出版本库, 则变为 Untracked 文件

                  . Modified：文件已修改。仅仅是修改，没有进行其他操作；
                                   这个文件也有两个去处：通过 add 可进入暂存 Staged 状态；
                                                                    使用 checkout 则丢弃修改过，返回到 Unmodify 状态，这个 checkout 即从库中取出文件, 覆盖当前修改

                 . Staged: 暂存状态。执行 commit 将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为 Unmodified 状态。
                              执行git reset HEAD filename 取消暂存，文件状态为 Modified
                
                
    2）四种状态的转变：      
         新建文件 -> Untracked；
         使用 add 命令将新建文件加入暂存区 -> Staged；
         使用 commit 命令将暂存区文件提交到版本库 -> Unmodified；
        
         如果对 Unmodified 状态的文件进行修改 -> Modified
         如果对 Unmodified 状态的文件进行 remove 操作 -> Untracked
        
         状态转变图：https://blog.csdn.net/tonglin12138/article/details/88675679
    
          
4. 代码提交流程：🚩
    骨干流程：git add -> git commit -m -> git push 
    流程解释：添加到暂存区，提交到 git 库生成版本号，push 到远程仓库以供他人可以使用
    
    1）新建新代码：
        git init
        git add .
        git add README.md
        git commit -m "创建注释"
        git remote add origin https://github.com/IronDukee/***.git
        git pull origin master
        git push -u origin master
        
    2）更新新代码：
        git status
        git add *
        git commit -m "更新注释"
        git pull
        git push origin master
        
        Ref：https://www.cnblogs.com/zlxbky/p/7727895.html
       
    

//////////////////////////////////////////


5. 语句解释：

    Part Common:     
    
    git status：代码状态
    
    git help：总体语句帮助
    git help：具体语句帮助
    
    git branch：分支状态
    git diff：版本差异显示
    
    git remote add origin https://github.com/IronDukee/***.git：与远程仓库建立连接
    git remote remove origin                                                   与远程仓库脱离连接


    Part A：本地操控
    1）commit：
        git commit；提交版本
        git commit --amend：删除上一次提交版本，提交基于此版本修改后的新版本

    2）checkout：
         git checkout A：当前工作指针 * 移动到分支头 A；
         git checkout c：从当前或者其他分支头中分离出当前工作指针 HEAD，指向结点 c；

         git checkout -b A：在当前工作结点下“新建分支头” A，并将当前工作指针 * 赋予 A；
         git checkout -b A c：在指定结点 c 下“新建分支头” A，并将当前工作指针 * 赋予 A

    3）branch：
         git branch A：         将“新建分支头” A，直接指向当前工作结点（HEAD or *）；
         git branch A c：       将“新建分支头” A，直接指向指定结点 c；
         git branch A B~^2^：将“新建分支头” A，间接指向从指针 B 处移动 ~^2^ 步结点；

         git branch -f A：         将“既有分支头”或者“新建分支头” A，直接指向当前工作结点（HEAD or *）； 
         git branch -f A c：       将“既有分支头”或者“新建分支头” A，直接指向指定结点 c； 
         git branch -f A B~^2^：将“既有分支头”或者“新建分支头” A，间接指向从指针 B 处移动 ~^2^ 步结点；

    4）rebase：(注意连接顺序*)
         git rebase A：   将“当前工作结点”连接到 A 下面；（非重叠部分连接）
         git rebase A B：将 B 接到 A 下面 （非重叠部分连接）
                                将 B 移至 A（当 B 和 A 在同一条线上时，功能同 git branch -f 🚩）

         git rebase -i A~n：互动式拣选指针 A 以上 n 个版本结点，并以 A~n 结点为根版本结点，重新构建直链
                                    类似功能：见 cherry-pick

         优点：Rebase 使你的提交树变得很干净, 所有的提交都在一条线上；
         缺点：Rebase 修改了提交树的历史
                               
    
    5）cherry-pick：
         git cherry-pick c1 c2 ...：在“当前工作结点”下连接指定结点 c1 c2 ...
                                             类似功能：见 git rebase -i A~n

    6）reset & revert：
        git reset HEAD^ / HEAD~n
        git revert HEAD
    
    
    
    Part B: 远程操控
    0）名词解释：
         1> origin master：. 远程分支，反映了远程仓库（在你上次和它通信时）的版本状态；
                                   . 在你 checkout 远程分支时，其自动进入分离 HEAD 状态；
                                     这么做是限制不能直接在这些分支上进行操作, 必须在别的地方完成工作, （更新了远程分支之后）再用远程 pull 到本地工作成果

    1）git clone：在本地创建一个远程仓库的拷贝
    
    2）git fetch：. 从远程仓库下载本地仓库中缺失的提交记录；
                        . 更新远程分支指针（如 o/master）
                        . git fetch 不会改变本地仓库的状态，不会更新你的 master 分支，也不会修改你磁盘上的文件；
                          可以将 git fetch 的理解为单纯的下载操作。

    3）git pull：
         git pull = git fetch + git merge 🚩
         git pull --rebase = git fetch + git rebase o/master
                                    git fetch + git merge o/master

         场景功能：提交代码后，被其他人延续更新版本结点，
                        git pull --rebase 协同 o/master 后，pull 远程仓库中的代码


    4）git push origin master：
         切到本地仓库中的 master 分支，获取所有的提交，再到远程仓库 origin 中找到 master 分支，将远程仓库中没有的提交记录都添加上去，搞定之后告诉我。
    
    
    